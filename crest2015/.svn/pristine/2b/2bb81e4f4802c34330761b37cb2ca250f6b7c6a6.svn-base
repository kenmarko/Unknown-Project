<?php namespace App\Http\Controllers;

use Illuminate\Http\Response;
use App\Http\Controllers\BaseController;
use App\Models\Address;
use App\Models\Sitio;
use App\Models\Barangay;
use App\Models\MunicipalityCity;
use App\Models\Province;
use App\Models\Country;
use App\Models\AddressType;
use App\Http\Requests\AddressRequest;
use App\Http\Requests\AddressEditRequest;
use App\Http\Requests\DeleteRequest;
use App\Http\Requests\ReorderRequest;
use Illuminate\Support\Facades\Auth;
use Datatables;
use Config;    
use Hash;

class AddressController extends BaseController {
   

    /*
    return a list of country in json format based on a term
    **/
    public function search(){
      $term = Input::get('term');
      $result = Address::where('house_no','LIKE','%$term%').orWhere('address_name','LIKE','%$term%')->get();
      return Response::json($result);
    }

    public function dataJson(){
      $result = Address::where('is_active',1)->get();
      return response()->json($result);
    }

 /**
   * Display a listing of the resource.
   *
   * @return Response
   */
   public function index()
    {
        // Show the page
        return view('address.index');
    }




    /**
     * Show the form for creating a new resource.
     *
     * @return Response
     */
    public function getCreate() {
        // Get all the available permissions
  
        // Show the page
        $action=0;
        $sitio_list = Sitio::orderBy('sitio_name','ASC')->get();
        $barangay_list = Barangay::orderBy('barangay_name','ASC')->get();
        $municipality_list = MunicipalityCity::orderBy('municipality_city_name','ASC')->get();
        $province_list = Province::orderBy('province_name','ASC')->get();
        $country_list = Country::orderBy('country_name','ASC')->get();
        $address_type_list = AddressType::orderBy('address_type_name','ASC')->get();
        return view('address.create',compact('action','sitio_list','barangay_list','municipality_list','province_list','country_list','address_type_list'));
    }
  /**
   * Store a newly created resource in storage.
   *
   * @return Response
   */
    public function postCreate(AddressRequest $address_request) {

        $address = new Address();
        $address -> house_no = $address_request->house_no;
        $address -> block_no = $address_request->house_no;
        $address -> street = $address_request->street;
        $address -> other_sitio = $address_request->other_sitio;
        $address -> sitio_id = $address_request->sitio_id;
        $address -> other_barangay = $address_request->other_barangay;
        $address -> barangay_id = $address_request->barangay_id; 
        $address -> municipality_city_id = $address_request->municipality_city_id;
        $address -> province_id = $address_request->province_id;
        $address -> country_id = $address_request->country_id;
        $address -> address_type_id = $address_request->address_type_id;
        $address -> save();

        $success = \Lang::get('address.create_success').' : '.$address->address_name ; 
        return redirect('address/create')->withSuccess( $success);
    }

 /**
   * Show the form for editing the specified resource.
   *
   * @param  int  $id
   * @return Response
   */
    public function getEdit($id) {
        $address = Address::find($id);
       //var_dump($its_customs_office);
        return view('address/edit',compact('address'));
      
    }

  /**
   * Update the specified resource in storage.
   *
   * @param  int  $id
   * @return Response
   */
    public function postEdit(AddressEditRequest $address_edit_request, $id) {
      
        $address = Address::find($id);
        $address -> house_no = $address_edit_request->house_no;
        $address -> block_no = $address_edit_request->house_no;
        $address -> street = $address_edit_request->street;
        $address -> other_sitio = $address_edit_request->other_sitio;
        $address -> sitio_id = $address_edit_request->sitio_id;
        $address -> other_barangay = $address_edit_request->other_barangay;
        $address -> barangay_id = $address_edit_request->barangay_id; 
        $address -> municipality_city_id = $address_edit_request->municipality_city_id;
        $address -> province_id = $address_edit_request->province_id;
        $address -> country_id = $address_edit_request->country_id;
        $address -> address_type_id = $address_edit_request->address_type_id;
        $address -> save();

        return redirect('address');
    }

  
/**
     * Remove the specified resource from storage.
     *
     * @param $id
     * @return Response
     */
     

    public function getDelete($id)
     {
        $address = Address::find($id);
        // Show the page
        return view('address/delete', compact('address'));
    }

 /**
     * Remove the specified resource from storage.
     *
     * @param $id
     * @return Response
     */
    public function postDelete(DeleteRequest $request,$id)
    {
        $address = Address::find($id);
        $address->delete();
        return redirect('address');
    }
/**
     * Show a list of all the languages posts formatted for Datatables.
     *
     * @return Datatables JSON
     */
 public function data()
    {
       // $gen_language = GenLanguage::whereNull('gen_language.deleted_at')
          $address_list = Address::join('sitio','address.sitio_id','=','sitio_id')
              ->join('barangay','address.barangay_id','=','barangay.id')
              ->join('municipality_city','address.municipality_city_id','=','municipality_city.id')
              ->join('province','address.province_id','=','province.id')
              ->join('country','address.country_id','=','country.id')
              // ->join('address_type','address.address_type_id','=','address_type.id')
              ->select(array('address.id','address.house_no','address.block_no','address.street','address.other_sitio','sitio.sitio_name','address.other_barangay','barangay.barangay_name','municipality_city.municipality_city_name','province.province_name','country.country_name','address.address_type_id'))
              ->orderBy('address.id', 'ASC');
           // ->select(array('gen_language.name', 'gen_language.lang_code',
            //'_gen_language.icon as icon'));
       // $gen_language_list = GenLanguage::all();  //successfully  returned data from db
        //var_dump($gen_language_list);  //i am doing debugging procedure. to check if there is available dataa retreive from db
    
        return Datatables::of($address_list)
            ->add_column('actions', '<a href="{{{ URL::to(\'address/\' . $id . \'/edit\' ) }}}" class="btn btn-success btn-sm" ><span class="glyphicon glyphicon-pencil"></span> {{ Lang::get("its/form.edit") }}</a>
                    <a href="{{{ URL::to(\'address/\' . $id . \'/delete\' ) }}}" class="btn btn-sm btn-danger"><span class="glyphicon glyphicon-trash"></span> {{ Lang::get("its/form.delete") }}</a>
                    <input type="hidden" name="row" value="{{$id}}" id="row">')
            ->remove_column('id')
            ->make();
    }
   /**
     * Reorder items
     *
     * @param items list
     * @return items from @param
     */
    public function getReorder(ReorderRequest $request) {
        $list = $request->list;
        $items = explode(",", $list);
        $order = 1;                 
        foreach ($items as $value) {
            if ($value != '') {
                Address::where('id', '=', $value) -> update(array('name' => $order));
                $order++;
            }
        }
        return $list;
    }


}
