<?php namespace App\Http\Controllers;

use Illuminate\Http\Response;
use App\Http\Controllers\BaseController;
use App\Models\TeacherDepartment;
use App\Http\Requests\TeacherDepartmentRequest;
use App\Http\Requests\TeacherDepartmentEditRequest;
use App\Http\Requests\DeleteRequest;
use App\Http\Requests\ReorderRequest;
use Illuminate\Support\Facades\Auth;
use Datatables;
use Config;    
use Hash;

class TeacherDepartmentController extends BaseController {
   

    /*
    return a list of country in json format based on a term
    **/
    public function search(){
      $term = Input::get('term');
      $result = TeacherDepartment::where('teacher_id','LIKE','%$term%')->get();
      return Response::json($result);
    }

    public function dataJson(){
      $result = TeacherDepartment::where('is_active',1)->get();
      return response()->json($result);
    }

 /**
   * Display a listing of the resource.
   *
   * @return Response
   */
   public function index()
    {
        // Show the page
        return view('teacher_department.index');
    }




    /**
     * Show the form for creating a new resource.
     *
     * @return Response
     */
    public function getCreate() {
        // Get all the available permissions
  
        // Show the page
        return view('teacher_department.create');
    }
  /**
   * Store a newly created resource in storage.
   *
   * @return Response
   */
    public function postCreate(TeacherDepartmentRequest $teacher_department_request) {

        $teacher_department = new TeacherDepartment();
        $teacher_department -> teacher_id = $teacher_department_request->teacher_id;
        $teacher_department -> department_id = $teacher_department_request->department_id;
        $teacher_department -> is_active = $teacher_department_request->is_active;
        $teacher_department -> save();


        $success = \Lang::get('teacher_department.create_success').' : '.$teacher_department->teacher_department_name ; 
        return redirect('teacher_department/create')->withSuccess( $success);
    }

 /**
   * Show the form for editing the specified resource.
   *
   * @param  int  $id
   * @return Response
   */
    public function getEdit($id) {
        $teacher_department = TeacherDepartment::find($id);
       //var_dump($its_customs_office);
        return view('teacher_department/edit',compact('teacher_department'));
      
    }

  /**
   * Update the specified resource in storage.
   *
   * @param  int  $id
   * @return Response
   */
    public function postEdit(TeacherDepartmentEditRequest $teacher_department_edit_request, $id) {
      
        $teacher_department = TeacherDepartment::find($id);
        $teacher_department -> teacher_id = $teacher_department_edit_request->teacher_id;
        $teacher_department -> department_id = $teacher_department_edit_request->department_id;
        $teacher_department -> is_active = $teacher_department_edit_request->is_active;
        $teacher_department -> save();

        return redirect('teacher_department');
    }

  
/**
     * Remove the specified resource from storage.
     *
     * @param $id
     * @return Response
     */
     

    public function getDelete($id)
     {
        $teacher_department = TeacherDepartment::find($id);
        // Show the page
        return view('teacher_department/delete', compact('teacher_department'));
    }

 /**
     * Remove the specified resource from storage.
     *
     * @param $id
     * @return Response
     */
    public function postDelete(DeleteRequest $request,$id)
    {
        $teacher_department = TeacherDepartment::find($id);
        $teacher_department->delete();
        return redirect('teacher_department');
    }
/**
     * Show a list of all the languages posts formatted for Datatables.
     *
     * @return Datatables JSON
     */
 public function data()
    {
       // $gen_language = GenLanguage::whereNull('gen_language.deleted_at')
          $teacher_department_list = TeacherDepartment::join('teacher','teacher_department.teacher_id','=','teacher.id')
              ->join('person','teacher.person_id','=','person.id')
              ->join('department','teacher_department.department_id','=','department.id')
              ->select(array('teacher_department.id','person.first_name','person.last_name','department.department_name','teacher_department.is_active'))
              ->orderBy('teacher_department.id', 'ASC');
           // ->select(array('gen_language.name', 'gen_language.lang_code',
            //'_gen_language.icon as icon'));
       // $gen_language_list = GenLanguage::all();  //successfully  returned data from db
        //var_dump($gen_language_list);  //i am doing debugging procedure. to check if there is available dataa retreive from db
    
        return Datatables::of($teacher_department_list)
            ->add_column('actions', '<a href="{{{ URL::to(\'teacher_department/\' . $id . \'/edit\' ) }}}" class="btn btn-success btn-sm" ><span class="glyphicon glyphicon-pencil"></span> {{ Lang::get("its/form.edit") }}</a>
                    <a href="{{{ URL::to(\'teacher_department/\' . $id . \'/delete\' ) }}}" class="btn btn-sm btn-danger"><span class="glyphicon glyphicon-trash"></span> {{ Lang::get("its/form.delete") }}</a>
                    <input type="hidden" name="row" value="{{$id}}" id="row">')
            ->remove_column('id')
            ->editColumn('first_name','{{ ucwords(strtolower($first_name." ".$last_name)) }}')
            ->remove_column('last_name')
            ->editColumn('is_active','@if($is_active == 1)
                                        <i class="glyphicon glyphicon-ok"></i>
                                      @else
                                        <i class="glyphicon glyphicon-remove"></i>
                                      @endif
                        ')
            ->make();
    }
   /**
     * Reorder items
     *
     * @param items list
     * @return items from @param
     */
    public function getReorder(ReorderRequest $request) {
        $list = $request->list;
        $items = explode(",", $list);
        $order = 1;                 
        foreach ($items as $value) {
            if ($value != '') {
                TeacherDepartment::where('id', '=', $value) -> update(array('name' => $order));
                $order++;
            }
        }
        return $list;
    }


}
